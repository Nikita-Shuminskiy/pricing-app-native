import RootStore from '../../RootStore/root-store';import {LoadingEnum, NewUserType} from '../../Type/models';export class AuthStoreService {    rootStore: typeof RootStore;    constructor(rootStore: typeof RootStore) {        this.rootStore = rootStore;    }    async checkAuth(): Promise<void> {        this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            await this.rootStore.AuthStore.checkAuth();            /*	await this.rootStore.WalletStoreService.getWallets(this.rootStore.AuthStore.user._id);*/        } catch (e) {            console.log(e);        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }    async logOutUser(): Promise<void> {        this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            await this.rootStore.AuthStore.logOutUser();        } catch (e) {            console.log(e);        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }    async registration(userData: NewUserType): Promise<void> {        this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            await this.rootStore.AuthStore.registration(userData);            await this.rootStore.AuthStore.login({email: userData.email, password: userData.password});        } catch (e) {            this.rootStore.Notification.setNotification('error', true, 'Ошибка, введены не правильные данные');        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }    async login(userData: { email: string; password: string }): Promise<void> {        this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            await this.rootStore.AuthStore.login({email: userData.email, password: userData.password});        } catch (e) {            this.rootStore.Notification.setNotification('error', true, 'Ошибка, введены не правильные данные');        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }}export default AuthStoreService;