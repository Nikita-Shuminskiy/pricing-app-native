import {action, makeObservable, observable} from 'mobx';import {    CategoryType,    ChartDatasetLineType,    ChartDatasetPieType,    ParamsToChartDate} from '../Type/models';import {v1} from 'uuid';import {chartApi} from '../../api/api';import {HistoryStore} from '../HistoryStore/history-store';import {generateColor} from "../../utils/utils";export class CategoriesStore extends HistoryStore {    categories: CategoryType[] = [        {_id: v1(), value: 'Магазин еды', color: '#f2a5a5'},        {_id: v1(), value: 'Магазин одежды', color: '#bd465c'},        {_id: v1(), value: 'Комунальные услуги', color: '#b346bd'},        {_id: v1(), value: 'Подарки', color: '#7346bd'},        {_id: v1(), value: 'Авто серсис', color: '#3337a6'},        {_id: v1(), value: 'Развлечения', color: '#3369a6'},        {_id: v1(), value: 'Сигареты и алкоголь', color: '#33a6a6'},        {_id: v1(), value: 'Другое', color: '#33a676'},        {_id: v1(), value: 'Бьюти', color: '#A6336D82'},    ];    selectedСategories: string[] = [];    walletChartId: string | undefined = '';    chartDataPie: ChartDatasetPieType[] = []    /* example =>*/    /*  [          {              name: 'Chart',              population: 12,              color: '#d01818',              legendFontColor: '#fff',              statisticsDataEveryMonthTheYear: [                  {monthName: '13', category: '11', totalSum: 11}              ]          },  ];*/    /* chartDataLine: ChartDatasetLineType[] = [         {             data: [1, 2, 1],             strokeWidth: 2,             color: (opacity = 1) => `rgba(134, 61, 244, 1)`,             key: '123'         },     ]; */    labels: string[] = [];    constructor() {        super();        makeObservable(this, {            selectedСategories: observable,            chartDataPie: observable,            labels: observable,            walletChartId: observable,            setSelectedСategories: action,            getChartData: action,        });        this.setSelectedСategories = this.setSelectedСategories.bind(this);    }    setSelectedСategories(newCategory: string): void {        const checkRepeatSelectedCategories = this.selectedСategories.find(            (category) => category === newCategory,        );        if (checkRepeatSelectedCategories) {            this.selectedСategories = this.selectedСategories.filter(                (category) => category !== checkRepeatSelectedCategories,            );        } else {            this.selectedСategories = [...this.selectedСategories, newCategory];        }    }    async getChartData(payload: ParamsToChartDate) {        const {data} = await chartApi.getChartData(payload);        if (payload.typeChart === 'pie') {            const result = []            this.categories.forEach((category) => {                this.chartDataPie = data.forEach((chartCategory) => {                    if (chartCategory.name === category.value) {                        return result.push({...chartCategory, color: category.color})                    }                })            })            this.chartDataPie = result        }    }    addСategory(category: CategoryType): void {        this.categories.push(category);        return;    }    removeСategory(idCategory: string): void {        const currentCategory = this.categories.findIndex((category) => category._id === idCategory);        this.categories.splice(currentCategory, 1);        return;    }    changeСategory(currentCategory: CategoryType): void {        this.categories.find((category) => {            if (category._id === currentCategory._id) {                category.value = currentCategory.value;            }        });        return;    }    setСategory(categories: CategoryType[]): void {        this.categories = categories;        return;    }}export default new CategoriesStore();