import {action, makeObservable, observable} from 'mobx';import {CategoryType, ChartDatasetLineType, ChartDatasetPieType, ParamsToChartDate} from '../Type/models';import {v1} from 'uuid';import {chartApi} from '../../api/api';import {HistoryStore} from '../HistoryStore/history-store';import {generateColor} from "../../utils/utils";export class CategoriesStore extends HistoryStore {    categories: CategoryType[] = [        {_id: v1(), value: 'Магазин еды'},        {_id: v1(), value: 'Магазин одежды'},        {_id: v1(), value: 'Комунальные услуги'},        {_id: v1(), value: 'Подарки'},        {_id: v1(), value: 'Авто серсис'},        {_id: v1(), value: 'Развлечения'},        {_id: v1(), value: 'Сигареты и алкоголь'},        {_id: v1(), value: 'Другое'},        {_id: v1(), value: 'Бьюти'},    ];    selectedСategories: string[] = [];    walletChartId: string | undefined = '';    chartDataPie: ChartDatasetPieType[] = [        {            name: 'Chart',            population: 12,            color: '#d01818',            legendFontColor: '#fff',        },    ];    chartDataLine: ChartDatasetLineType[] = [        {            data: [1, 2, 1],            strokeWidth: 2,            color: (opacity = 1) => `rgba(134, 61, 244, 1)`,            key: '123'        },    ];    labels: string[] = [];    constructor() {        super();        makeObservable(this, {            selectedСategories: observable,            chartDataLine: observable,            chartDataPie: observable,            labels: observable,            walletChartId: observable,            setSelectedСategories: action,            getChartData: action,        });        this.setSelectedСategories = this.setSelectedСategories.bind(this);    }    setSelectedСategories(newCategory: string): void {        const checkRepeatSelectedCategories = this.selectedСategories.find(            (category) => category === newCategory,        );        if (checkRepeatSelectedCategories) {            this.selectedСategories = this.selectedСategories.filter(                (category) => category !== checkRepeatSelectedCategories,            );        } else {            this.selectedСategories = [...this.selectedСategories, newCategory];        }    }    async getChartData(payload: ParamsToChartDate) {        const {data} = await chartApi.getChartData(payload);        console.log(await chartApi.getChartData(payload))        if (payload.typeChart === 'pie') {            this.chartDataPie = data        }        if (payload.typeChart === 'line') {            this.chartDataLine = data.map((data) => ({                ...data,                color: (opacity = 1) => generateColor()            }));        }    }    addСategory(category: CategoryType): void {        this.categories.push(category);        return;    }    removeСategory(idCategory: string): void {        const currentCategory = this.categories.findIndex((category) => category._id === idCategory);        this.categories.splice(currentCategory, 1);        return;    }    changeСategory(currentCategory: CategoryType): void {        this.categories.find((category) => {            if (category._id === currentCategory._id) {                category.value = currentCategory.value;            }        });        return;    }    setСategory(categories: CategoryType[]): void {        this.categories = categories;        return;    }}export default new CategoriesStore();